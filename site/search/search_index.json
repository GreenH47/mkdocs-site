{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Create time: 2022.10.31 Last update: 2022-11-03 Welcome to GreenH47 personal site # For full documentation visit mkdocs.org . https://www.mkdocs.org/getting-started/ Please see the project license for further details. Please see the project license for further details. Commands # mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project folder layout # mkdocs.yml # The configuration file. .github/ # github auto deployment of your project (not include in the source file) site/ # build up webpage from md files docs/ index.md # The homepage. xxx.md # Other markdown pages img/ # images and other attachment.","title":"Home"},{"location":"#welcome-to-greenh47-personal-site","text":"For full documentation visit mkdocs.org . https://www.mkdocs.org/getting-started/ Please see the project license for further details. Please see the project license for further details.","title":"Welcome to GreenH47 personal site"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-folder-layout","text":"mkdocs.yml # The configuration file. .github/ # github auto deployment of your project (not include in the source file) site/ # build up webpage from md files docs/ index.md # The homepage. xxx.md # Other markdown pages img/ # images and other attachment.","title":"Project folder layout"},{"location":"about_copyright/","text":"Create time: 2022-10-29 Last update: 2022-11-03 copyright # copyright","title":"Power by and copyright"},{"location":"about_copyright/#copyright","text":"copyright","title":"copyright"},{"location":"about_me/","text":"Create time: 2022-10-29 Last update: 2022-11-03 Hi there \ud83d\udc4b # class Me: def __init__(self): self.name = 'GreenH47' self.languages = ['Chinese','English','Mongolian'] self.direction = ['fullstack','forntend','backend','aws'] self.status= 'Monash Uni Master of IT' self.email = 'greenhuang47@gmail.com' self.website = 'https://greenh47.github.io/mynote/' My programming language stack My Web application framework My Database side Other Tools and Frameworks \u2699\ufe0f GitHub Stats # \ud83d\udee0 Programming Languages #","title":"about me"},{"location":"about_me/#hi-there","text":"class Me: def __init__(self): self.name = 'GreenH47' self.languages = ['Chinese','English','Mongolian'] self.direction = ['fullstack','forntend','backend','aws'] self.status= 'Monash Uni Master of IT' self.email = 'greenhuang47@gmail.com' self.website = 'https://greenh47.github.io/mynote/' My programming language stack My Web application framework My Database side Other Tools and Frameworks","title":"Hi there \ud83d\udc4b"},{"location":"about_me/#github-stats","text":"","title":"\u2699\ufe0f GitHub Stats"},{"location":"about_me/#programming-languages","text":"","title":"\ud83d\udee0 Programming Languages"},{"location":"about_site_building/","text":"Create time: 2022-10-29 Last update: 2022-11-03 site_building # site_building","title":"How to build this site"},{"location":"about_site_building/#site_building","text":"site_building","title":"site_building"},{"location":"fit5032/","text":"Create time: 2022-10-29 Last update: 2022-11-03 How to use the FIT study Note document # download the markdown file repository and navigate to the docs folder view all the markdown files via Obsidian vault that can show the linked section in the note document You may find some extra material or program template repository in the Course Brief introduction for the FIT Note markdown Document (some course don't have ) you can view the web page which transfer from MD file online but will lose the extra information or wrong markdown display Course Brief introduction # week Introduction 1 Intro to Web development and ASP.Net. 2 The Front End, UX, Accessibility and Scaffolding 3 Introduction to C# & Version Control 4 Entity Framework 5 Fundamental Client Side JavaScript (jQuery; datatable; calendar; maps; rich text) 6 Validation 7 Security & Microsoft Identity (authentication Login Roles) 8 Email, Upload & Signal R 9 Web Optimisations(Reducing HTTP Connections Reducing File sizes Caching Perceived improvements) & Evolution of ASP.NET CORE 10 Modern JavaScript Web Development Approach (AngularJS) 11 Testing and Deployment in Cloud This repository contents weekly task and my assignment template for FIT5032 - Internet Application Development done for the year 2022. (Semester 2) Solutions are working out of the box. (Due to the nature of this unit) You can run the project by running the .mdf files which are intentionally in the repository so that it would be working. (some parts are hidden for safety but not influence the framework working) week 1 MVC & ASP .net # Lecture Note # Introduction to Internet Applications Development Understand the purpose of ASP.NET MVC Understand the benefits of the MVC architecture Q&A part # \u2605what is MVC # The Model-View-Controller (MVC) architectural pattern separates an application into three main groups of components: Models, Views, and Controllers Which action in MVC request & response # + if no model in the project. The controller will received the user's command and return the result to the VIEW Which functionality/files in each component of MVC? # Model: + database + Defines the data validation rules + contains code that defines its relationship with other models Controller: + Controls the application flow or logic of the application + decides what response is to be generated and passes the response (output) to the view + calls to model to access data View: + View is the outputs or responses that are sent back to the user once a request is processed + the presentation layer of an application + Razor View in .net What is Model? Functionality? Responsibilities? # A class or set of classes that describes all the business logic and additionally handles data access for an application. Also contains code that defines its relationship with other models . Defines the data validation rules to be used when adding or updating data. What is Controller? Functionality? Responsibilities? # Controllers are the components that handle user interaction, work with the model, and ultimately select a view to render. Controls the application flow or logic of the application Controller logic decides what response is to be generated Controller logic normally contains calls to models to access data , and also other functionalities like access control checks etc Controller passes the response (output) to the view What is View? Functionality? Responsibilities? # presenting content through the user interface. They use the Razor view engine to embed .NET code in HTML markup. Consist of markup (like HTML) code with embedded .NET code. Can also be other forms of output like XML, PDF documents etc. Views can be thought of as the presentation layer of an application and ideally should be as \"dumb\" as possible \u2605\u2605 Advantages of ASP.NET MVC = Why use MVC? = MVC benefit # Enables the full control over the rendered HTML (\u524d\u7aef\u53ef\u4f7f\u7528\u903b\u8f91) Provides clean separation of concerns(SoC). (\u804c\u80fd\u53ef\u5206\u5f00) Enables Test Driven Development (TDD).(\u4ee5method\u4e3a\u5355\u4f4d \u5bb9\u6613\u5199test) Easy integration with JavaScript frameworks.(\u5bb9\u6613\u96c6\u6210js\u6846\u67b6) Following the design of stateless nature of the web. (\u7f51\u9875\u4e0d\u5b58\u6570\u636e\u4ecemodel\u62ff\u6570\u636e\uff0c\u4e0d\u8bb0\u5f55\u7528\u6237\u72b6\u6001\u53ca\u81ea\u8eab\u72b6\u6001) RESTful urls that enables Search Engine Optimisation.(get post in url) No ViewState and PostBack events in comparison to ASP.NET Web Forms () \u2605\u2605\u2605 Layers/Components in ASP.NET # Front End Technology (Razor) .NET (This will be the server side programming technology) IIS (This is the server itself) MS SQL Server Separation of Concerns (SOC) \u5206\u6210\u72ec\u7acb\u51e0\u4e2a\u6a21\u5757\u5f00\u53d1 # Is a design principle for separating a computer program into distinct sections, such that each section addresses a separate concern . A concern can be as general as the details of the hardware the code is being optimized for, or as specific as the name of a class to instantiate. The value of separation of concerns is simplifying development and maintenance of computer programs. When concerns are well-separated, individual sections can be reused, as well as developed and updated independently. For example, user interface logic tends to change more frequently than business logic. If presentation code and business logic are combined in a single object, an object containing business logic must be modified every time the user interface is changed Single Responsibility Principle (SRP) \u6bcf\u4e2a\u6a21\u5757\u5982\u4f55\u5212\u5206 class\uff0c reuse # The single-responsibility principle (SRP) is a computer-programming principle that states that every module, class or function in a computer program should have responsibility over a single part of that program's functionality, and it should encapsulate that part. week 2 #","title":"FIT5032 Asp .net develop 2022 s2"},{"location":"fit5032/#how-to-use-the-fit-study-note-document","text":"download the markdown file repository and navigate to the docs folder view all the markdown files via Obsidian vault that can show the linked section in the note document You may find some extra material or program template repository in the Course Brief introduction for the FIT Note markdown Document (some course don't have ) you can view the web page which transfer from MD file online but will lose the extra information or wrong markdown display","title":"How to use the FIT study Note document"},{"location":"fit5032/#course-brief-introduction","text":"week Introduction 1 Intro to Web development and ASP.Net. 2 The Front End, UX, Accessibility and Scaffolding 3 Introduction to C# & Version Control 4 Entity Framework 5 Fundamental Client Side JavaScript (jQuery; datatable; calendar; maps; rich text) 6 Validation 7 Security & Microsoft Identity (authentication Login Roles) 8 Email, Upload & Signal R 9 Web Optimisations(Reducing HTTP Connections Reducing File sizes Caching Perceived improvements) & Evolution of ASP.NET CORE 10 Modern JavaScript Web Development Approach (AngularJS) 11 Testing and Deployment in Cloud This repository contents weekly task and my assignment template for FIT5032 - Internet Application Development done for the year 2022. (Semester 2) Solutions are working out of the box. (Due to the nature of this unit) You can run the project by running the .mdf files which are intentionally in the repository so that it would be working. (some parts are hidden for safety but not influence the framework working)","title":"Course Brief introduction"},{"location":"fit5032/#week-1-mvc-asp-net","text":"","title":"week 1 MVC &amp; ASP .net"},{"location":"fit5032/#lecture-note","text":"Introduction to Internet Applications Development Understand the purpose of ASP.NET MVC Understand the benefits of the MVC architecture","title":"Lecture Note"},{"location":"fit5032/#qa-part","text":"","title":"Q&amp;A part"},{"location":"fit5032/#what-is-mvc","text":"The Model-View-Controller (MVC) architectural pattern separates an application into three main groups of components: Models, Views, and Controllers","title":"\u2605what is MVC"},{"location":"fit5032/#which-action-in-mvc-request-response","text":"+ if no model in the project. The controller will received the user's command and return the result to the VIEW","title":"Which action in MVC request &amp; response"},{"location":"fit5032/#which-functionalityfiles-in-each-component-of-mvc","text":"Model: + database + Defines the data validation rules + contains code that defines its relationship with other models Controller: + Controls the application flow or logic of the application + decides what response is to be generated and passes the response (output) to the view + calls to model to access data View: + View is the outputs or responses that are sent back to the user once a request is processed + the presentation layer of an application + Razor View in .net","title":"Which functionality/files in each component of MVC?"},{"location":"fit5032/#what-is-model-functionality-responsibilities","text":"A class or set of classes that describes all the business logic and additionally handles data access for an application. Also contains code that defines its relationship with other models . Defines the data validation rules to be used when adding or updating data.","title":"What is Model? Functionality? Responsibilities?"},{"location":"fit5032/#what-is-controller-functionality-responsibilities","text":"Controllers are the components that handle user interaction, work with the model, and ultimately select a view to render. Controls the application flow or logic of the application Controller logic decides what response is to be generated Controller logic normally contains calls to models to access data , and also other functionalities like access control checks etc Controller passes the response (output) to the view","title":"What is Controller? Functionality? Responsibilities?"},{"location":"fit5032/#what-is-view-functionality-responsibilities","text":"presenting content through the user interface. They use the Razor view engine to embed .NET code in HTML markup. Consist of markup (like HTML) code with embedded .NET code. Can also be other forms of output like XML, PDF documents etc. Views can be thought of as the presentation layer of an application and ideally should be as \"dumb\" as possible","title":"What is View? Functionality? Responsibilities?"},{"location":"fit5032/#advantages-of-aspnet-mvc-why-use-mvc-mvc-benefit","text":"Enables the full control over the rendered HTML (\u524d\u7aef\u53ef\u4f7f\u7528\u903b\u8f91) Provides clean separation of concerns(SoC). (\u804c\u80fd\u53ef\u5206\u5f00) Enables Test Driven Development (TDD).(\u4ee5method\u4e3a\u5355\u4f4d \u5bb9\u6613\u5199test) Easy integration with JavaScript frameworks.(\u5bb9\u6613\u96c6\u6210js\u6846\u67b6) Following the design of stateless nature of the web. (\u7f51\u9875\u4e0d\u5b58\u6570\u636e\u4ecemodel\u62ff\u6570\u636e\uff0c\u4e0d\u8bb0\u5f55\u7528\u6237\u72b6\u6001\u53ca\u81ea\u8eab\u72b6\u6001) RESTful urls that enables Search Engine Optimisation.(get post in url) No ViewState and PostBack events in comparison to ASP.NET Web Forms ()","title":"\u2605\u2605 Advantages of ASP.NET MVC = Why use MVC? = MVC benefit"},{"location":"fit5032/#layerscomponents-in-aspnet","text":"Front End Technology (Razor) .NET (This will be the server side programming technology) IIS (This is the server itself) MS SQL Server","title":"\u2605\u2605\u2605 Layers/Components in ASP.NET"},{"location":"fit5032/#separation-of-concerns-soc","text":"Is a design principle for separating a computer program into distinct sections, such that each section addresses a separate concern . A concern can be as general as the details of the hardware the code is being optimized for, or as specific as the name of a class to instantiate. The value of separation of concerns is simplifying development and maintenance of computer programs. When concerns are well-separated, individual sections can be reused, as well as developed and updated independently. For example, user interface logic tends to change more frequently than business logic. If presentation code and business logic are combined in a single object, an object containing business logic must be modified every time the user interface is changed","title":"Separation of Concerns (SOC) \u5206\u6210\u72ec\u7acb\u51e0\u4e2a\u6a21\u5757\u5f00\u53d1"},{"location":"fit5032/#single-responsibility-principle-srp-class-reuse","text":"The single-responsibility principle (SRP) is a computer-programming principle that states that every module, class or function in a computer program should have responsibility over a single part of that program's functionality, and it should encapsulate that part.","title":"Single Responsibility Principle (SRP) \u6bcf\u4e2a\u6a21\u5757\u5982\u4f55\u5212\u5206 class\uff0c reuse"},{"location":"fit5032/#week-2","text":"","title":"week 2"},{"location":"fit5057/","text":"Create time: 2022-10-29 Last update: 2022-11-03 contact # email huangshixin47@163.com week1 # pip install pic # week 2 # aaa test # bbb","title":"FIT5057 project management 2022 s2"},{"location":"fit5057/#contact","text":"email huangshixin47@163.com","title":"contact"},{"location":"fit5057/#week1","text":"pip install","title":"week1"},{"location":"fit5057/#pic","text":"","title":"pic"},{"location":"fit5057/#week-2","text":"aaa","title":"week 2"},{"location":"fit5057/#test","text":"bbb","title":"test"}]}